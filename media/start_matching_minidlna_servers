#!/usr/bin/env python3
import sys,os,os.path,re
import sqlite3
import subprocess
from glob import glob
import fnmatch

dryrun = True if os.getenv("DRY") else False
print(f"Dryrun: {dryrun}")

usage = f"""{sys.argv[0]} <path to minidlna.conf directory> # or
{sys.argv[0]} <name> or -g <glob pattern> or -r <regex>
lists videos in database

set environment varialbe DRY for dry run."""
args = sys.argv[1:]

name_re = r"serv-(.*)-(\d+)$"

def helpexit(n=1):
  print(usage)
  exit(n)

if len(args) == 0:
  helpexit()

dbs = []
mode = "exact"
def main():
  global mode
  for arg in args:
    if arg == "-g":
      print("setting mode to glob")
      mode = "glob"
    elif arg == "-r":
      print("setting mode to regex")
      mode = "regex"
    elif arg == "-d":
      print(f"setting mode to dir")
      mode = "dir"
    else:
      handle(arg)
  proc()

def proc():
  for db in dbs:
    procdb(db)
    if len(dbs) > 1:
      print()

def testre(pattern,name):
  #print(f"testre {pattern} {name}")
  try:
    a = "-".join(name.split("-")[1:-1])
    m = re.search(pattern,a)
    #print(f"re.search({pattern},{name})")
    #print(f"m = {m}")
    return m
  except Exception:
    print(f"Fail {name}")
    exit()

def startmini(arg):
  confname = os.path.join(arg,"minidlna.conf")
  pidname = os.path.join(arg,"pid")
  if os.path.isfile(confname):
    if dryrun:
      print(f"Would try to start: {arg}")
    else:
      if os.path.isfile(pidname):
        pid = open(pidname).read().strip()
        if os.path.isdir(f"/proc/{pid}"):
          print(f"minidlna for {arg} already running as pid {pid}")
          return
      print(f"Trying to start: {arg}")
      m = subprocess.run(["/usr/sbin/minidlnad","-f",confname,"-P",pidname])
      print(f"  minidlnad returned {m.returncode}")
      #subprocess.run(["minif",arg])

servre = re.compile(r"^serv-(.*)-(\d+)$")
class Matcher:
  def __init__(self,pattern,isregex=True):
    self.pattern = pattern
    self.isregex = isregex
    if isregex:
      self.re = re.compile(pattern)
    else:
      self.text = pattern
    self.servre = re.compile(r"^serv-(.*)-(\d+)$")
  def __call__(self,x):
    m = self.servre.match(x)
    if m is None:
      print(f"Not serv re {x}")
      return False
    n = m.group(1)
    if self.isregex:
      #print(f"is regex")
      #print(f"pattern: {self.pattern}")
      return (self.re.search(n) is not None)
    else:
      #print(f"trying exact {x} == {n}")
      return (self.text == n)

def handle(arg):
  if mode == "glob":
    print(f"matching glob mode: {arg}")
    matcher = Matcher(fnmatch.translate(f"*arg*"))
  elif mode == "exact":
    print(f"matching exact mode: {arg}")
    matcher = Matcher(arg,False)
  elif mode == "regex":
    print(f"matching regex mode: {arg}")
    matcher = Matcher(arg)
  elif mode == "dir":
    print(f"dir mode")
    if os.path.isdir(arg):
      startmini(arg)
    else:
      print(f"dir {arg} does not exist")
  else:
    print(f"Mode '{mode}' invalid")
    exit(1)
  # try match
  tostart = set()
  user = os.getenv("USER")
  base = os.path.expanduser(f"~/.minidlna/{user}")
  servs = list(filter(os.path.isdir,glob(os.path.join(base,f"serv-*"))))
  for serv in servs:
    servname = serv.split("/")[-1]
    m = matcher(servname)
    #print(servname,m)
    if m:
      print(f"to start: {serv}")
      tostart.add(serv)
  if len(tostart) == 0:
    print(f"No miniservs match pattern '{arg}' in mode {mode}")
    exit(1)
  for x in sorted(tostart):
    startmini(x)
      
def procdb(dbname):
  servname = dbname.split("/")[-3]
  try:
    con = sqlite3.connect(dbname)
    cur = con.cursor()
    sql = 'SELECT DISTINCT title, duration, path FROM details WHERE duration IS NOT NULL'
    cur.execute(sql)
    rows = cur.fetchall()
    t = f"Videos for {servname}"
    print(t)
    print("="*len(t))
    showrows(rows,numbers=True)
  except sqlite3.Error:
    print(f"Error occurred with {dbname}")
    raise

def pad(s,n):
  return (s + (" "*n))[:n]

def showrows(rows,numbers=False):
  mn = 0
  md = 0
  try:
    for row in rows:
      name, duration, _ = row
      if len(name) > mn:
        mn = len(name)
      if len(duration) > md:
        md = len(duration)
    for i,row in enumerate(rows):
      name,duration,_ = row
      n = pad(name,mn)
      d = pad(duration,md)
      if numbers:
        print(f"{i+1:3}: {n}  {d}")
      else:
        print(f"{n}  {d}")
  except BrokenPipeError:
    return


if __name__ == "__main__":
  main()
