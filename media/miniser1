#!/usr/bin/env python3
import os,os.path,sys,subprocess
from distutils.dir_util import mkpath,DistutilsFileError
import distutils

import socket
def getIp():
    a = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    a.connect(('192.168.2.1',0))
    return a.getsockname()[0]

def getCwdName():
    return os.getcwd().split("/")[-1]

def getopt(args):
    d = {}
    for s in args:
        if '=' in s:
            i = s.index('=')
            a = s[:i]
            b = s[i+1:]
            d[a]=b
            print("{}: {}".format(a,b))
        elif s == '.':
            d['name'] = getCwdName()
    return d        

def port_is_in_use(port: int) -> bool:
    import socket
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

#log_level=general,artwork,database,inotify,scanner,metadata,http,ssdp,tivo=warn
def conf(**kw):
    myip = getIp()
    ipa = int(myip.split('.')[3])
    defs = {'user':os.getenv('USER'),'mediadir':os.getcwd(),'port':8200,'loglevel':'general','myip':ipa}
    defs.update(kw)
    port = int(defs['port'])
    if port_is_in_use(port):
      print(f"Port {port} is already in use, searching for an available port")
      while port_is_in_use(port):
        port += 1
      print(f"Found port {port}")
    defs['port'] = port
    if not 'name' in defs: defs['name']="minidlna-{user}-{port}".format(**defs)
    if not 'var' in defs: defs['var']=os.path.expanduser("~/.minidlna/{user}/serv-{name}-{port}".format(**defs))
    var=defs['var']
    try:
        mkpath(var)
        mkpath(os.path.join(var,"db"))
        mkpath(os.path.join(var,"log"))
        pidfn = os.path.join(var,"pid")
    except distutils.errors.DistutilsFileError:
        print("Failed to create {}".format(var))
        raise
    confn = os.path.join(var,"minidlna.conf")
    conf = '''
user={user}
media_dir={mediadir}
db_dir={var}/db
log_dir={var}/log
log_level={loglevel}
root_container=B
#network_interface=
#listening_ip=
port={port}
#presentation_url=/
friendly_name={name}
serial=68101981059{port:04d}
uuid={myip:04d}-{port:04d}
#model_name=Windows Media Connect compatible (MiniDLNA)
#model_number=
#inotify=yes
album_art_names=Cover.jpg/cover.jpg/AlbumArtSmall.jpg/albumartsmall.jpg
album_art_names=AlbumArt.jpg/albumart.jpg/Album.jpg/album.jpg
album_art_names=Folder.jpg/folder.jpg/Thumb.jpg/thumb.jpg
#strict_dlna=no
#enable_tivo=no
#notify_interval=895
minissdpdsocket={var}/minissdpd.sock
wide_links=yes
'''.format(**defs)
    with open(confn,"wt") as f:
        print('Config in {}'.format(confn))
        f.write(conf)
    return (confn,pidfn)    

confn,pidfn = conf(**getopt(sys.argv[1:]))
subprocess.call(['/usr/sbin/minidlnad','-f',confn,'-P',pidfn])
